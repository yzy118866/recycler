"""
Django settings for project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()


def getenv_list(name: str, default: str = "") -> list[str]:
    return list(filter(lambda s: s, os.getenv(name, default).split(",")))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "секретный ключ",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)
PRODUCTION = os.environ.get("PRODUCTION", False)

default_hosts = ["<АЙПИ АДРЕС>", "localhost"]
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", ",".join(default_hosts)).split(",")
USE_X_FORWARDED_HOST = True
HOSTNAME_OVERRIDE = os.getenv("HOSTNAME_OVERRIDE", None)
X_FRAME_OPTIONS = "ALLOW-FROM https://example.com/"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3-party
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
    "django_filters",
    "dynamic_preferences",
    "huey.contrib.djhuey",
    "bx_django_utils",  # Required by huey_monitor
    "huey_monitor",
    # custom
    "accounts",
    "recycler",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

CSRF_TRUSTED_ORIGINS = [
    "http://АЙПИ АДРЕС",
    "http://серыйip",
    "http://АЙПИ АДРЕС:8088",
    "https://АЙПИ АДРЕС:8088",
    *getenv_list("TRUSTED_ORIGINS"),
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if os.environ.get("USE_DB_ENGINE") or os.environ.get("DB_ENGINE"):
    CONN_MAX_AGE = 100
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.sqlite3"),
            "NAME": os.environ.get("DB_NAME", "db.sqlite"),
            "USER": os.environ.get("DB_USER", ""),
            "PASSWORD": os.environ.get("DB_PASSWORD", ""),
            "HOST": os.environ.get("DB_HOST", None),
            "PORT": os.environ.get("DB_PORT", None),
            "CONN_MAX_AGE": 600,
        }
    }
else:
    CONN_MAX_AGE = 5
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
            "OPTIONS": {
                "timeout": 20,
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "accounts.User"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/login"
LOGOUT_REDIRECT_URL = "/"

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ru"

LANGUAGES = [
    ("ru", "RU"),
    ("en", "EN"),
]

TIME_ZONE = "Europe/Moscow"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "static_root"
STATICFILES_DIRS = ["static", "dist_static"]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "accounts.backends.ExpiringTokenAuthentication",
        "accounts.backends.CsrfExemptSessionAuthentication",
        # "rest_framework.authentication.TokenAuthentication",
        # # "app.serializers.CsrfExemptSessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "accounts.backends.TotalPagesPageNumberPagination",
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "PAGE_SIZE": 20,
}

TOKEN_EXPIRED_AFTER_SECONDS = 60 * 60 * 24 * 30

SPECTACULAR_SETTINGS = {
    "TITLE": "API",
    "DESCRIPTION": "",
    "VERSION": "1.0.0",
    "SCHEMA_PATH_PREFIX": "/api/v1",
    "SERVE_PERMISSIONS": [] if DEBUG else ["rest_framework.permissions.IsAuthenticated"],
    "COMPONENT_SPLIT_PATCH": True,
    "COMPONENT_SPLIT_REQUEST": True,
    "ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE": False,
}


HUEY = {
    "huey_class": os.getenv("HUEY_CLASS", "huey.SqliteHuey"),
    "results": True,
    "immediate": bool(os.getenv("HUEY_IMMEDIATE", False)),
    "connection": {},
    "consumer": {
        "workers": 1,
    },
}

if huey_conn := os.getenv("HUEY_CONNECTION", None):
    HUEY["connection"]["url"] = huey_conn


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        "mail_admins": {
            "class": "django.utils.log.AdminEmailHandler",
            "level": "ERROR",
            # But the emails are plain text by default - HTML is nicer
            "include_html": True,
        },
        # Log to a text file that can be rotated by logrotate
        "logfile": {
            "class": "logging.handlers.RotatingFileHandler",
            # 'maxBytes': 1024,  # 3 MB
            "level": "DEBUG",
            "filename": os.path.join(BASE_DIR, "django.log"),
            "maxBytes": 1024 * 30,  # in kb
            "backupCount": 0 if DEBUG else 10,
            "formatter": "verbose",
        },
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        # Again, default Django configuration to email unhandled exceptions
        "django.request": {
            "handlers": ["mail_admins"] if PRODUCTION else [],
            "level": "ERROR",
            "propagate": True,
        },
        # Might as well log any errors anywhere else in Django
        "django": {
            "handlers": ["logfile", "console"],
            "level": "INFO" if DEBUG else "ERROR",
            "propagate": False,
        },
        "http": {
            "level": "INFO",
        },
        "http_protocol": {
            "level": "INFO",
        },
        "haystack": {"level": "INFO"},
        "root": {
            "level": "DEBUG" if DEBUG else "INFO",
            "handlers": ["console", "logfile"],
        },
        "": {"level": "DEBUG" if DEBUG else "INFO", "handlers": ["console", "logfile"]},
    },
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module}.{funcName} {process:d} {thread:d} {message}",  # noqa
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
}
